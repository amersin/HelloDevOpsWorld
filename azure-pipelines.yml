# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  az.cov.container: products
  az.cov.folder: cov-analysis
  az.license.container: requiredfiles
  az.license.folder: custom_files
  az.resource: synopsysgsafs
  cov.authkeyfile: '$(Pipeline.Workspace)/$(az.license.folder)/auth-key.txt'
  cov.bin: '$(cov.folder)/bin'
  cov.bldcmd: 'msbuild HelloDevOpsWorld.sln /t:build'
  cov.checkers: '--all --webapp-security'
  cov.drive: Z
  cov.idir: '$(Build.SourcesDirectory)/idir'
  cov.folder: '$(cov.drive)/$(az.cov.folder)'
  cov.license: $(Pipeline.Workspace)/$(az.license.folder)/license.dat
  cov.url: http://coverity.eastus.cloudapp.azure.com:18080
  cov.stream: WebGoat.NET

steps:
- task: PowerShell@2
  env:
    SMB_PASSWORD: $(SECRET_SMB_PASSWORD)
  inputs:
    targetType: 'inline'
    script: |
      $connectTestResult = Test-NetConnection -ComputerName $(az.resource).file.core.windows.net -Port 445
      if ($connectTestResult.TcpTestSucceeded) {
        # Save the password so the drive will persist on reboot
        cmd.exe /C "cmdkey /add:`"$(az.resource).file.core.windows.net`" /user:`"Azure\$(az.resource)`" /pass:`"$env:SMB_PASSWORD`""
        # Mount the drive
        New-PSDrive -Name Z -PSProvider FileSystem -Root "\\$(az.resource).file.core.windows.net\$(az.cov.container)" -Persist
      } else {
        Write-Error -Message "Unable to reach the Azure storage account via port 445. Check to make sure your organization or ISP is not blocking port 445, or use Azure P2S VPN, Azure S2S VPN, or Express Route to tunnel SMB traffic over a different port."
      }
- task: CmdLine@2
  displayName: Download license & key files
  env:
    SAS_TOKEN: $(SECRET_SAS_TOKEN)
  inputs:
    script: |
      azcopy copy "https://$(az.resource).file.core.windows.net/$(az.license.container)/$(az.license.folder)$SAS_TOKEN" "$(Pipeline.Workspace)" --recursive
- task: CmdLine@2
  displayName: Configure Coverity
  inputs:
    script: |
      $(cov.bin)/cov-configure --cs   
- task: CmdLine@2
  inputs:
    script: |
      curl -fsLOS https://github.com/Microsoft/vswhere/releases/latest/download/vswhere.exe
      for /f "tokens=*" %%i in ('vswhere -find MSBuild\*\Bin') do set PATH=%PATH%;%%i
      
      echo on
      $(cov.bin)/cov-build --dir $(cov.idir) --fs-capture-search $(Build.SourcesDirectory) $(cov.bldcmd)
      $(cov.bin)/cov-analyze --dir $(cov.idir) --ticker-mode none --strip-path $(Build.SourcesDirectory) $(cov.checkers) -sf $(cov.license)